#!/usr/bin/env python

import os

Import('env')

env['CC'] = 'clang'
env['CFLAGS'] = Split('-std=c11 -g -fcolor-diagnostics')
env['CPPPATH'] = '#/src/godot_headers'
env['LIBS'] = 'archive'

def thirdparty_sweep():
	import subprocess
	sweep_script_dir = str(Dir('#/src/thirdparty/'))
	sweep_script =  sweep_script_dir + '/sweep.sh'
	subprocess.run([sweep_script, sweep_script_dir])

def thirdparty_clean():
	import subprocess
	clean_script_dir = str(Dir('#/src/thirdparty/'))
	clean_script =  clean_script_dir + '/clean.sh'
	subprocess.run([clean_script, clean_script_dir])

def thirdparty_copy(source, target, env):
	src = 'src/thirdparty/build/libarchive.so.16' # TODO: eval target[0] to set src
	#Execute(Copy('build/linux/libarchive.so.16', 'src/thirdparty/build/libarchive.so.16'))
	Execute(Copy(target[0], src))

if env['builtin']:
	env['CPPPATH'] = '#/src/godot_headers:#/src/thirdparty/libarchive/libarchive'
	env['LIBPATH']=['#/build/linux']
	env['LIBS'] = [":libarchive.so.16"]

	env.Append( LINKFLAGS = Split('-z origin') )
	env.Append( RPATH = env.Literal(os.path.join('\\$$ORIGIN')))

	so = env.SharedLibrary('libgdarchive.so', ['gdns.c', 'gdarchive.c'])

	la = env.Command('libarchive.so.16', '', ['./src/thirdparty/build.sh', thirdparty_copy])
	env.Depends(so, la)

	inst_la = env.Install('#addons/gdArchive', 'libarchive.so.16')
	env.Depends(inst_la, so)

	if env.GetOption('clean'):
		if env['builtin_sweep']:
			thirdparty_sweep()
		else:
			thirdparty_clean()


else:
	so = env.SharedLibrary('libgdarchive.so', ['gdns.c', 'gdarchive.c'])

inst_so = env.Install('#addons/gdArchive', '#build/linux/libgdarchive.so')
env.Depends(inst_so, so)
